Test date: 11/19/18  19:08:45 
The number of times you used the grading program is 2 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
MOV Grading System Version 4.0
Student: St#1=Choi                 St#2t=Lee                  Type=Team                
Grading and testing history log
       User Test.    Date: 11/19/18  18:32:40  keyboard     test         
       User Test.    Date: 11/19/18  18:33:59  keyboard     test         
       User Test.    Date: 11/19/18  18:34:49  keyboard     test         
       User Test.    Date: 11/19/18  18:44:36  keyboard     test         
       User Test.    Date: 11/19/18  18:46:35  keyboard     test         
       User Test.    Date: 11/19/18  18:53:32  keyboard     test         
       User Test.    Date: 11/19/18  18:53:49  keyboard     test         
       User Test.    Date: 11/19/18  19:00:43  keyboard     test         
       User Test.    Date: 11/19/18  19:00:53  keyboard     test         
       User Test.    Date: 11/19/18  19:01:11  keyboard     test         
   *** Grading Run.  Date: 11/19/18  19:06:23 
       User Test.    Date: 11/19/18  19:08:38  keyboard     test         
   *** Grading Run.  Date: 11/19/18  19:08:45 
   *** Checking opcodes used
   Analyzing source code. Only mov and int are allowed.
   Number of intructions other than mov or int =   0 

   *** Running functional tests
   Running test 01
   Running test 02
   Running test 03
   Running test 04
   Running test 05
   Running test 06
   Running test 07
   Running test 08
   Running test 09
   *** Passed all functional tests
++ Grade ++   80 = Points earned for correct answers.

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0018 The program header format is adequate. 
DOCHB-0.56 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    11  = Number of user tests.                                  
     2  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC>6&}xC6&k~C6&juiC86&zuzC766&Zkyz&jgzk@&7757?57>&&7?@6>@:;&


Building the file mov.ans for electronic submission...

;----------------------------------
;Program:  MOV
;
;Function: - Read and echo 3 ASCII characters x y z
;					 - x will be an ASCII uppercase letter ‘A’ - ‘Z’ or digit ‘0’ - ‘9’ y will be an ASCII digit ‘0’ - ‘9’
;					 - z will be an ASCII plus sign ‘+’ or other ASCII character
;					 - Using only the mov instruction:
;					 - convert y from ASCII ‘0’ to ‘9’to hex 0 to 9 - calculate ... if (z == '+') then x = x + y
;					 - Output x
;					 - Terminate
;
;Owner:    John Choi, Chang Lee
;
;Version:  Date    Reason
;      11/19/2018  Original code
;
;
;----------------------------------
         .model    small          ;4 64KB segments
         .8086                    ;only 8086 instructions
         .stack    256            ;256 byte stack
;----------------------------------

;----------------------------------
         .data                    ;data
;----------------------------------
x        db        0              ;variable x
dum_x    db        0              ;dummy variable z at memory offset x + 1
y        db        0              ;variable y
                                  ;
z        db        0              ;variable z

inctbl   db        000,001,002,003,004,005,006,007,008,009 ;
         db        010,011,012,013,014,015,016,017,018,019 ;
         db        020,021,022,023,024,025,026,027,028,029 ;
         db        030,031,032,033,034,035,036,037,038,039 ;
         db        040,041,042,043,044,045,046,047,048,049 ;
         db        050,051,052,053,054,055,056,057,058,059 ;
         db        060,061,062,063,064,065,066,067,068,069 ;
         db        070,071,072,073,074,075,076,077,078,079 ;
         db        080,081,082,083,084,085,086,087,088,089 ;
         db        090,091,092,093,094,095,096,097,098,099 ;
         db        100,101,102,103,104,105,106,107,108,109 ;
         db        110,111,112,113,114,115,116,117,118,119 ;
         db        120,121,122,123,124,125,126,127,128     ;
;----------------------------------

;----------------------------------
         .fardata                 ;256 bytes of work memory for selection code
;----------------------------------
         db        256 dup(0)     ;byte vars need 256 bytes of work memory
;----------------------------------

;----------------------------------
         .code                    ;Program
;----------------------------------
; Establish addressability to data and extra segment
; Clear bx, to be used as a word pointer.
;----------------------------------
start:   mov       ax,@data       ;initialize
         mov       ds,ax          ; the ds register
         mov       ax,@fardata    ;initialize
         mov       es,ax          ; the es register
         mov       bx,0           ;clear bx as pointer register
;----------------------------------
; Read and echo x
;----------------------------------
         mov       ah,8           ;read code
         int       21h            ;read interrupt
         mov       [x],al         ;save x
         mov       dl,al          ;ready to echo x
         mov       ah,2           ;write code
         int       21h            ;write interrupt
;----------------------------------
; Read and echo y
;----------------------------------
         mov       ah,8           ;read code
         int       21h            ;read interrupt
         mov       [y],al         ;save y
         mov       dl,al          ;ready to echo y
         mov       ah,2           ;write code
         int       21h            ;write interrupt
;----------------------------------
; Read and echo z
;----------------------------------
         mov       ah,8           ;read code
         int       21h            ;read interrupt
         mov       [z],al         ;save z
         mov       dl,al          ;ready to echo z
         mov       ah,2           ;write code
         int       21h            ;write interrupt
;----------------------------------
; Convert ASCII number saved in y to hex number.
; Use that number to find the value of x + y using table.
; Use es memory to check that z value is equal to +.
; In that case, print out the x + y value, otherwise, print original x value.
;----------------------------------
         mov       bl, [y]				;save y in bl register
         mov       bl, [inctbl + bx - 48]  ;convert ASCII number to hex number using table
				 mov       si, bx                  ;save number inside of si 
         mov       bl, [x]                 ;save x value in bl register
         mov       al, [inctbl + bx + si]  ;save x + y value in al register
         mov       bl,'+'                  ;save + value in bl register
         mov  byte ptr es:[bx],1    ;es memory at addr=value_of_+ set to 1
         mov       bl,[z]           ;bx pts to es memory addr=value_of_z
         mov  byte ptr es:[bx],0    ;es memory at addr=value_of_z set to 0       
         mov       bl,'+'           ;bx pts to es memory addr=value_of_+
				 mov       bl,es:[bx]       ;bx=0 if (z==+)  bx=1 if (z!=+)
         mov  byte ptr[x + bx], al  ;If bx is zero, x will be replaced with al.
;----------------------------------
; Output z
;----------------------------------
         mov       ah,2           ;write code
         mov       dl,[x]         ;write z
         int       21h            ;write interrupt       

;----------------------------------
; Terminate
;----------------------------------
         mov       ax,4c00h       ;get the termination code
         int       21h            ;terminate
                                  ;
         end       start          ;end program
;----------------------------------