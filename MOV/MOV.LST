Microsoft (R) Macro Assembler Version 6.11		    11/19/18 18:44:51
mov.asm							     Page 1 - 1


				;----------------------------------
				;Program:  MOV
				;
				;Function: - Read and echo 3 ASCII characters x y z
				;					 - x will be an ASCII uppercase letter ‘A’ - ‘Z’ or digit ‘0’ - ‘9’ y will be an ASCII digit ‘0’ - ‘9’
				;					 - z will be an ASCII plus sign ‘+’ or other ASCII character
				;					 - Using only the mov instruction:
				;					 - convert y from ASCII ‘0’ to ‘9’to hex 0 to 9 - calculate ... if (z == '+') then x = x + y
				;					 - Output x
				;					 - Terminate
				;
				;Owner:    Dana Lasher
				;
				;Version:  Date    Reason
				;      11/19/2018  Original code
				;
				;
				;----------------------------------
				         .model    small          ;4 64KB segments
				         .8086                    ;only 8086 instructions
				         .stack    256            ;256 byte stack
				;----------------------------------
				
				;----------------------------------
 0000				         .data                    ;data
				;----------------------------------
 0000 00			x        db        0              ;variable x
 0001 00			dum_x    db        0              ;dummy variable x at memory offset x + 1
 0002 00			y        db        0              ;variable y
				                                  ;
 0003 00			z        db        0              ;variable z
				
 0004 00 01 02 03 04 05		inctbl   db        000,001,002,003,004,005,006,007,008,009 ;
       06 07 08 09
 000E  0A 0B 0C 0D 0E 0F	         db        010,011,012,013,014,015,016,017,018,019 ;
       10 11 12 13
 0018  14 15 16 17 18 19	         db        020,021,022,023,024,025,026,027,028,029 ;
       1A 1B 1C 1D
 0022  1E 1F 20 21 22 23	         db        030,031,032,033,034,035,036,037,038,039 ;
       24 25 26 27
 002C  28 29 2A 2B 2C 2D	         db        040,041,042,043,044,045,046,047,048,049 ;
       2E 2F 30 31
 0036  32 33 34 35 36 37	         db        050,051,052,053,054,055,056,057,058,059 ;
       38 39 3A 3B
 0040  3C 3D 3E 3F 40 41	         db        060,061,062,063,064,065,066,067,068,069 ;
       42 43 44 45
 004A  46 47 48 49 4A 4B	         db        070,071,072,073,074,075,076,077,078,079 ;
       4C 4D 4E 4F
 0054  50 51 52 53 54 55	         db        080,081,082,083,084,085,086,087,088,089 ;
       56 57 58 59
 005E  5A 5B 5C 5D 5E 5F	         db        090,091,092,093,094,095,096,097,098,099 ;
       60 61 62 63
 0068  64 65 66 67 68 69	         db        100,101,102,103,104,105,106,107,108,109 ;
       6A 6B 6C 6D
 0072  6E 6F 70 71 72 73	         db        110,111,112,113,114,115,116,117,118,119 ;
       74 75 76 77
 007C  78 79 7A 7B 7C 7D	         db        120,121,122,123,124,125,126,127,128     ;
       7E 7F 80
				;----------------------------------
				
				;----------------------------------
 0000				         .fardata                 ;256 bytes of work memory for selection code
				;----------------------------------
 0000  0100 [			         db        256 dup(0)     ;byte vars need 256 bytes of work memory
        00
       ]
				;----------------------------------
				
				;----------------------------------
 0000				         .code                    ;Program
				;----------------------------------
				; Establish addressability to data and extra segment
				; Clear bx, to be used as a word pointer.
				;----------------------------------
 0000  B8 ---- R		start:   mov       ax,@data       ;initialize
 0003  8E D8			         mov       ds,ax          ; the ds register
 0005  B8 ---- R		         mov       ax,@fardata    ;initialize
 0008  8E C0			         mov       es,ax          ; the es register
 000A  BB 0000			         mov       bx,0           ;clear bx as pointer register
				;----------------------------------
				; Read and echo x
				;----------------------------------
 000D  B4 08			         mov       ah,8           ;read code
 000F  CD 21			         int       21h            ;read interrupt
 0011  A2 0000 R		         mov       [x],al         ;save x
 0014  8A D0			         mov       dl,al          ;ready to echo x
 0016  B4 02			         mov       ah,2           ;write code
 0018  CD 21			         int       21h            ;write interrupt
				;----------------------------------
				; Read and echo y
				;----------------------------------
 001A  B4 08			         mov       ah,8           ;read code
 001C  CD 21			         int       21h            ;read interrupt
 001E  A2 0002 R		         mov       [y],al         ;save y
 0021  8A D0			         mov       dl,al          ;ready to echo y
 0023  B4 02			         mov       ah,2           ;write code
 0025  CD 21			         int       21h            ;write interrupt
				;----------------------------------
				; Read and echo z
				;----------------------------------
 0027  B4 08			         mov       ah,8           ;read code
 0029  CD 21			         int       21h            ;read interrupt
 002B  A2 0003 R		         mov       [z],al         ;save z
 002E  8A D0			         mov       dl,al          ;ready to echo z
 0030  B4 02			         mov       ah,2           ;write code
 0032  CD 21			         int       21h            ;write interrupt
				;----------------------------------
				
 0034  8B 1E 0002 R		         mov       bx, word ptr[y]
 0038  8B B7 FFD4 R		         mov       si, word ptr[inctbl + bx - 48]
 003C  89 36 0002 R		         mov       word ptr[y], si
				
 0040  8A 1E 0000 R		         mov       bl, [x]
 0044  8A 80 0004 R		         mov       al, [inctbl + bx + si]
 0048  B3 2B			         mov       bl,'+'
 004A  26: C6 07 00		         mov  byte ptr es:[bx],0    ;es memory at addr=value_of_+ set to 1
 004E  8A 1E 0003 R		         mov       bl,[z]           ;bx pts to es memory addr=value_of_z
 0052  26: C6 07 01		         mov  byte ptr es:[bx],1    ;es memory at addr=value_of_z set to 0
 0056  B3 2B			         mov       bl,'+'           ;bx pts to es memory addr=value_of_+
 0058  26: 8A 1F						 mov       bl,es:[bx]       ;bx=0 if (z==+)  bx=1 if (z!=+)
 005B  88 87 0000 R		         mov  byte ptr[x + bx], al
				
				;----------------------------------
				; Output z
				;----------------------------------
 005F  B4 02			         mov       ah,2           ;write code
 0061  8A 16 0000 R		         mov       dl,[x]         ;write x
 0065  CD 21			         int       21h            ;write interrupt
				
				;----------------------------------
				; Terminate
				;----------------------------------
 0067  B8 4C00			         mov       ax,4c00h       ;get the termination code
 006A  CD 21			         int       21h            ;terminate
				                                  ;
				         end       start          ;end program
				;----------------------------------
Microsoft (R) Macro Assembler Version 6.11		    11/19/18 18:44:51
mov.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0085	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0100	  Para	  Stack	  'STACK'	 
FAR_DATA . . . . . . . . . . . .	16 Bit	 0100	  Para	  Private 'FAR_DATA'  
_TEXT  . . . . . . . . . . . . .	16 Bit	 006C	  Word	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
dum_x  . . . . . . . . . . . . .	Byte	 0001	  _DATA	
inctbl . . . . . . . . . . . . .	Byte	 0004	  _DATA	
start  . . . . . . . . . . . . .	L Near	 0000	  _TEXT	
x  . . . . . . . . . . . . . . .	Byte	 0000	  _DATA	
y  . . . . . . . . . . . . . . .	Byte	 0002	  _DATA	
z  . . . . . . . . . . . . . . .	Byte	 0003	  _DATA	

	   0 Warnings
	   0 Errors
