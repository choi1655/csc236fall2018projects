Microsoft (R) Macro Assembler Version 6.11		    10/09/18 23:54:31
tabs.asm						     Page 1 - 1


				;--------------------------------------------------------------------
				;
				;   TABS ***** MASM VERSION *****
				;
				;
				;   TABS.  This program reads in a file through standard input and
				;   generates columns based on the user argument, 10 spaces if none
				;   inputted. It will ignore characters from 00h to 1Fh, except 09h, 0Ah,
				;   0Dh, and 1Ah. It will read all characters from 20h to 7Fh. All lines will
				;   terminate with DOS carriage return and line feed pair (0D0Ah). Files will
				;   terminate with DOS End of File (EOF) character (1Ah). The EOF will only appear
				;   after a DOS carriage return and line feed pair (0D0Ah) or as the only
				;   character in a null file.
				;
				;   To use, type this command:  TABS
				;
				;   Author:    John Choi
				;
				;   Date       Reason
				;   ----       ------
				; 10/09/2018   Original version
				;
				;---------------------------------------
				         .model small                  ; 64k data and 64k code
				         .8086                         ; only allow 8086 instructions
				         .stack 256                    ; stack size is 256 bytes
				;---------------------------------------
 0000				         .data
				;---------------------------------------
 0000 00			counter   db 0                         ; Initialize character counter to 0
 0001 0A			argument  db 10                        ; initialize default spacing to 10
				;---------------------------------------
 0000				         .code
				;---------------------------------------
				; Establish addressability to the data segment.
				; Initialize the work register.
				; - bx is cleared to zero and will be used as
				;   an index register in the conversion process
				;---------------------------------------
 0000				start:
 0000  B8 ---- R		        mov ax, @data                  ; establish addressability
 0003  8E D8			        mov ds, ax                     ; for the data segment
 0005  BB 0000			        mov bx, 0                      ; clear index register
				;---------------------------------------
				; Try to read from standard input.
				; - program terminates if it hits EOF.
				;---------------------------------------
 0008  26: 80 3E 0080 00	        cmp byte ptr es:[80h], 0       ; access the CLP count 80h bytes into the extra segment
 000E  74 0C			        je  getloop                    ; no parameter ... continue with the program
 0010  26: A0 0082		        mov al, byte ptr es:[82h]      ; parameter entered ... load al with the CLP character
 0014  A2 0001 R		        mov [argument], al             ; initialize argument with input value
 0017  80 2E 0001 R 30		        sub [argument], 48             ; subtract 48 to get the correct number
				;---------------------------------------
				; Point where the program keeps looping to
				; get a new character
				;---------------------------------------
 001C				getloop:
 001C  B4 08			        mov ah, 8                      ; read from standard input
 001E  CD 21			        int 21h                        ; set ah=8 and issue 21h and saves
 0020  8A D0			        mov dl, al                     ; input character to al
				;---------------------------------------
				; If the character was a tab, replace with spaces.
				; else, loop to read another character.
				;---------------------------------------
 0022  B4 02			        mov ah, 2                      ; set up to write the character
 0024  80 FA 0A			        cmp dl, 0Ah                    ; is the character line feed?
 0027  74 49			        je  linechange                 ; yes, jump to linechange
				;---------------------------------------
				; Point where code comes back from linechange
				;---------------------------------------
 0029				return:
 0029  80 FA 1A			        cmp dl, 1Ah                    ; if character is EOF
 002C  74 4B			        je  terminate                  ; jump to terminate
 002E  8A 2E 0000 R		        mov ch, [counter]              ; assign counter to ch
 0032  8A 0E 0001 R		        mov cl, [argument]             ; assign argument to cl
 0036  38 CD			        cmp ch, cl                     ; compare
 0038  75 05			        jne notTen                     ; jump if false
 003A  C6 06 0000 R 00		        mov [counter], 0               ; reset to 0 if 10
				;---------------------------------------
				; if statement where the program jumps to
				; if ch is not equal to cl
				;---------------------------------------
 003F				notTen:
 003F  FE 06 0000 R		        inc [counter]                  ; add one to the character counter
 0043  80 FA 09			        cmp dl, 09h                    ; if the character was tab
 0046  74 06			        je  isTab                      ; yes, jump
 0048  EB 00			        jmp print                      ; print
				;---------------------------------------
				; Block where program uses to print the character
				;---------------------------------------
 004A				print:
 004A  CD 21			        int 21h                        ; print character
 004C  EB CE			        jmp getloop                    ; re run the program
				;---------------------------------------
				; Block of code where the program comes to
				; if the character is a tab
				;---------------------------------------
 004E				isTab:
 004E  B2 20			        mov dl, ' '                    ; assign space to print
 0050  8A 2E 0000 R		        mov ch, [counter]              ; assign counter to dh
 0054  8A 0E 0001 R		        mov cl, [argument]             ; assign argument to dl
 0058  2A E9			        sub ch, cl                     ; subtract argument from counter: 4-10=-6
 005A  F6 DD			        neg ch                         ; set counter to 6: 0-(-6) = 6
 005C  8A CD			        mov cl, ch                     ; set counter to cx for loop
 005E  C6 06 0000 R 00		        mov [counter], 0               ; reset counter to 0
 0063  FE C1			        inc cl                         ; to adjust cl value
				;---------------------------------------
				; For loop that runs for the number of spaces
				; it needs to close the 10 character gap
				;---------------------------------------
 0065				repit:
 0065  CD 21			        int 21h                        ; print space
 0067  B2 20			        mov dl, ' '                    ; reassign dl to space
 0069  FE C9			        dec cl                         ; loop until counter is 0
 006B  80 F9 00			        cmp cl, 0                      ; if cl is not 0
 006E  75 F5			        jne repit                      ; repeat
 0070  EB AA			        jmp getloop                    ; re run the program
				;---------------------------------------
				; Block of code that handles the line change
				;---------------------------------------
 0072				linechange:
 0072  C6 06 0000 R FF		        mov [counter], -1              ; reset the character counter
 0077  EB B0			        jmp return                     ; return to previous location
				;---------------------------------------
				; The program read a EOF
				;---------------------------------------
 0079				terminate:
 0079  CD 21			        int 21h
 007B  B8 4C00			        mov ax, 4c00h                  ; set correct exit code in ax
 007E  B2 1A			        mov dl, 1Ah
 0080  8A F2			        mov dh, dl
 0082  CD 21			        int 21h
				        end start                      ; execution begins at the label start
				;---------------------------------------
Microsoft (R) Macro Assembler Version 6.11		    10/09/18 23:54:31
tabs.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0002	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0100	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0084	  Word	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
argument . . . . . . . . . . . .	Byte	 0001	  _DATA	
counter  . . . . . . . . . . . .	Byte	 0000	  _DATA	
getloop  . . . . . . . . . . . .	L Near	 001C	  _TEXT	
isTab  . . . . . . . . . . . . .	L Near	 004E	  _TEXT	
linechange . . . . . . . . . . .	L Near	 0072	  _TEXT	
notTen . . . . . . . . . . . . .	L Near	 003F	  _TEXT	
print  . . . . . . . . . . . . .	L Near	 004A	  _TEXT	
repit  . . . . . . . . . . . . .	L Near	 0065	  _TEXT	
return . . . . . . . . . . . . .	L Near	 0029	  _TEXT	
start  . . . . . . . . . . . . .	L Near	 0000	  _TEXT	
terminate  . . . . . . . . . . .	L Near	 0079	  _TEXT	

	   0 Warnings
	   0 Errors
